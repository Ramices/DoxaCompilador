
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 17 04:41:21 BRT 2017
//----------------------------------------------------

package compiler.syntax;

import java_cup.runtime.*;
import java.util.*;
import compiler.tree.*;
import compiler.tree.expression.*;
import compiler.tree.command.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 17 04:41:21 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\004\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\004\007" +
    "\000\002\005\004\000\002\006\005\000\002\006\002\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\007\000\002\010\005\000\002\011\006\000\002\011" +
    "\007\000\002\012\006\000\002\013\010\000\002\013\002" +
    "\000\002\014\005\000\002\015\004\000\002\015\002\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\006\000\002\020\007" +
    "\000\002\021\011\000\002\021\007\000\002\022\007\000" +
    "\002\023\004\000\002\024\006\000\002\025\006\000\002" +
    "\025\007\000\002\026\004\000\002\026\002\000\002\027" +
    "\005\000\002\027\002\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\005\000\002\030\003\000\002\031\005" +
    "\000\002\031\004\000\002\031\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\002\uffff\045\uffff\046\uffff\001\002\000" +
    "\010\002\011\045\010\046\007\001\002\000\010\002\ufffe" +
    "\045\ufffe\046\ufffe\001\002\000\010\002\ufffd\045\ufffd\046" +
    "\ufffd\001\002\000\004\004\027\001\002\000\004\004\013" +
    "\001\002\000\004\002\000\001\002\000\010\002\001\045" +
    "\001\046\001\001\002\000\006\014\ufff9\024\023\001\002" +
    "\000\004\014\015\001\002\000\010\041\020\042\016\043" +
    "\021\001\002\000\012\024\ufff6\025\ufff6\027\ufff6\030\ufff6" +
    "\001\002\000\004\025\022\001\002\000\012\024\ufff8\025" +
    "\ufff8\027\ufff8\030\ufff8\001\002\000\012\024\ufff7\025\ufff7" +
    "\027\ufff7\030\ufff7\001\002\000\026\002\ufffc\004\ufffc\030" +
    "\ufffc\031\ufffc\035\ufffc\036\ufffc\037\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\001\002\000\004\004\025\001\002\000\004\014" +
    "\ufffb\001\002\000\006\014\ufff9\024\023\001\002\000\004" +
    "\014\ufffa\001\002\000\004\026\202\001\002\000\010\004" +
    "\032\014\031\030\034\001\002\000\010\041\020\042\016" +
    "\043\021\001\002\000\004\026\164\001\002\000\010\002" +
    "\ufff4\045\ufff4\046\ufff4\001\002\000\020\004\uffec\030\uffec" +
    "\031\uffec\035\uffec\037\uffec\044\uffec\045\uffec\001\002\000" +
    "\020\004\053\030\034\031\042\035\040\037\045\044\037" +
    "\045\010\001\002\000\022\004\uffe7\030\uffe7\031\uffe7\035" +
    "\uffe7\036\uffe7\037\uffe7\044\uffe7\045\uffe7\001\002\000\004" +
    "\026\160\001\002\000\004\026\152\001\002\000\022\004" +
    "\uffeb\030\uffeb\031\uffeb\035\uffeb\036\uffeb\037\uffeb\044\uffeb" +
    "\045\uffeb\001\002\000\026\002\uffee\004\uffee\030\uffee\031" +
    "\uffee\035\uffee\036\uffee\037\uffee\044\uffee\045\uffee\046\uffee" +
    "\001\002\000\022\004\uffe5\030\uffe5\031\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\044\uffe5\045\uffe5\001\002\000\020\004\uffed" +
    "\030\uffed\031\uffed\035\uffed\037\uffed\044\uffed\045\uffed\001" +
    "\002\000\004\026\146\001\002\000\022\004\uffe4\030\uffe4" +
    "\031\uffe4\035\uffe4\036\uffe4\037\uffe4\044\uffe4\045\uffe4\001" +
    "\002\000\024\004\uffe6\030\uffe6\031\uffe6\035\uffe6\036\uffe6" +
    "\037\uffe6\040\143\044\uffe6\045\uffe6\001\002\000\022\004" +
    "\uffe8\030\uffe8\031\uffe8\035\uffe8\036\uffe8\037\uffe8\044\uffe8" +
    "\045\uffe8\001\002\000\022\004\uffe9\030\uffe9\031\uffe9\035" +
    "\uffe9\036\uffe9\037\uffe9\044\uffe9\045\uffe9\001\002\000\022" +
    "\004\uffea\030\uffea\031\uffea\035\uffea\036\uffea\037\uffea\044" +
    "\uffea\045\uffea\001\002\000\006\023\140\026\073\001\002" +
    "\000\006\004\056\025\055\001\002\000\022\004\uffde\030" +
    "\uffde\031\uffde\035\uffde\036\uffde\037\uffde\044\uffde\045\uffde" +
    "\001\002\000\004\026\057\001\002\000\022\004\071\014" +
    "\063\022\070\026\066\027\uffd9\032\062\033\065\034\067" +
    "\001\002\000\004\027\137\001\002\000\042\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9" +
    "\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\001\002\000\042\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\024\uffc5\025\uffc5\027\uffc5" +
    "\001\002\000\020\004\071\014\063\022\070\026\066\032" +
    "\062\033\065\034\067\001\002\000\040\005\106\006\102" +
    "\007\111\010\105\011\112\012\101\013\113\014\107\015" +
    "\104\016\110\017\103\020\100\021\114\024\uffd7\027\uffd7" +
    "\001\002\000\042\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\020\uffc3\021\uffc3\024\uffc3\025\uffc3\027\uffc3\001\002\000" +
    "\020\004\071\014\063\022\070\026\066\032\062\033\065" +
    "\034\067\001\002\000\042\005\uffc4\006\uffc4\007\uffc4\010" +
    "\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\020\uffc4\021\uffc4\024\uffc4\025\uffc4\027\uffc4\001" +
    "\002\000\020\004\071\014\063\022\070\026\066\032\062" +
    "\033\065\034\067\001\002\000\044\005\uffc2\006\uffc2\007" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\024\uffc2\025\uffc2\026" +
    "\073\027\uffc2\001\002\000\044\004\056\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\024\uffc1\025\uffc1" +
    "\027\uffc1\001\002\000\022\004\071\014\063\022\070\026" +
    "\066\027\uffd9\032\062\033\065\034\067\001\002\000\004" +
    "\027\075\001\002\000\044\004\uffdc\005\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\017\uffdc\020\uffdc\021\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\001\002\000\042\005\uffc7\006\uffc7\007\uffc7\010\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017" +
    "\uffc7\020\uffc7\021\uffc7\024\uffc7\025\uffc7\027\uffc7\001\002" +
    "\000\036\005\106\006\102\007\111\010\105\011\112\012" +
    "\101\013\113\014\107\015\104\016\110\017\103\020\100" +
    "\021\114\027\115\001\002\000\020\004\071\014\063\022" +
    "\070\026\066\032\062\033\065\034\067\001\002\000\020" +
    "\004\071\014\063\022\070\026\066\032\062\033\065\034" +
    "\067\001\002\000\020\004\071\014\063\022\070\026\066" +
    "\032\062\033\065\034\067\001\002\000\020\004\071\014" +
    "\063\022\070\026\066\032\062\033\065\034\067\001\002" +
    "\000\020\004\071\014\063\022\070\026\066\032\062\033" +
    "\065\034\067\001\002\000\020\004\071\014\063\022\070" +
    "\026\066\032\062\033\065\034\067\001\002\000\020\004" +
    "\071\014\063\022\070\026\066\032\062\033\065\034\067" +
    "\001\002\000\020\004\071\014\063\022\070\026\066\032" +
    "\062\033\065\034\067\001\002\000\020\004\071\014\063" +
    "\022\070\026\066\032\062\033\065\034\067\001\002\000" +
    "\020\004\071\014\063\022\070\026\066\032\062\033\065" +
    "\034\067\001\002\000\020\004\071\014\063\022\070\026" +
    "\066\032\062\033\065\034\067\001\002\000\020\004\071" +
    "\014\063\022\070\026\066\032\062\033\065\034\067\001" +
    "\002\000\020\004\071\014\063\022\070\026\066\032\062" +
    "\033\065\034\067\001\002\000\042\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\021\uffc8\024\uffc8\025\uffc8\027" +
    "\uffc8\001\002\000\042\005\106\006\102\007\111\010\105" +
    "\011\112\012\101\013\113\014\107\015\104\016\110\017" +
    "\103\020\uffd0\021\uffd0\024\uffd0\025\uffd0\027\uffd0\001\002" +
    "\000\042\005\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\104\016\110\017\103\020\uffd6" +
    "\021\uffd6\024\uffd6\025\uffd6\027\uffd6\001\002\000\042\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\113" +
    "\014\107\015\104\016\110\017\103\020\uffcb\021\uffcb\024" +
    "\uffcb\025\uffcb\027\uffcb\001\002\000\042\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\uffca\012\uffca\013\113\014\107\015" +
    "\104\016\110\017\103\020\uffca\021\uffca\024\uffca\025\uffca" +
    "\027\uffca\001\002\000\042\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\021\uffd3\024\uffd3\025\uffd3\027\uffd3\001" +
    "\002\000\042\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\104\016\110\017\103\020" +
    "\uffd5\021\uffd5\024\uffd5\025\uffd5\027\uffd5\001\002\000\042" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\113\014\107\015\104\016\110\017\103\020\uffcf\021\uffcf" +
    "\024\uffcf\025\uffcf\027\uffcf\001\002\000\042\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\113\014\107" +
    "\015\104\016\110\017\103\020\uffcd\021\uffcd\024\uffcd\025" +
    "\uffcd\027\uffcd\001\002\000\042\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\020\uffd4\021\uffd4\024\uffd4\025\uffd4\027\uffd4" +
    "\001\002\000\042\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2" +
    "\020\uffd2\021\uffd2\024\uffd2\025\uffd2\027\uffd2\001\002\000" +
    "\042\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce" +
    "\013\113\014\107\015\104\016\110\017\103\020\uffce\021" +
    "\uffce\024\uffce\025\uffce\027\uffce\001\002\000\042\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\113\014" +
    "\107\015\104\016\110\017\103\020\uffcc\021\uffcc\024\uffcc" +
    "\025\uffcc\027\uffcc\001\002\000\042\005\106\006\102\007" +
    "\111\010\105\011\112\012\101\013\113\014\107\015\104" +
    "\016\110\017\103\020\uffd1\021\uffd1\024\uffd1\025\uffd1\027" +
    "\uffd1\001\002\000\006\024\134\027\uffda\001\002\000\020" +
    "\004\071\014\063\022\070\026\066\032\062\033\065\034" +
    "\067\001\002\000\040\005\106\006\102\007\111\010\105" +
    "\011\112\012\101\013\113\014\107\015\104\016\110\017" +
    "\103\020\100\021\114\024\uffd8\027\uffd8\001\002\000\042" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6" +
    "\024\uffc6\025\uffc6\027\uffc6\001\002\000\044\004\uffdb\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\024" +
    "\uffdb\025\uffdb\027\uffdb\001\002\000\020\004\071\014\063" +
    "\022\070\026\066\032\062\033\065\034\067\001\002\000" +
    "\036\005\106\006\102\007\111\010\105\011\112\012\101" +
    "\013\113\014\107\015\104\016\110\017\103\020\100\021" +
    "\114\025\142\001\002\000\022\004\uffe3\030\uffe3\031\uffe3" +
    "\035\uffe3\036\uffe3\037\uffe3\044\uffe3\045\uffe3\001\002\000" +
    "\020\004\071\014\063\022\070\026\066\032\062\033\065" +
    "\034\067\001\002\000\036\005\106\006\102\007\111\010" +
    "\105\011\112\012\101\013\113\014\107\015\104\016\110" +
    "\017\103\020\100\021\114\025\145\001\002\000\024\004" +
    "\uffdd\030\uffdd\031\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\044\uffdd\045\uffdd\001\002\000\020\004\071\014\063\022" +
    "\070\026\066\032\062\033\065\034\067\001\002\000\036" +
    "\005\106\006\102\007\111\010\105\011\112\012\101\013" +
    "\113\014\107\015\104\016\110\017\103\020\100\021\114" +
    "\027\150\001\002\000\016\004\053\030\034\035\040\037" +
    "\045\044\037\045\010\001\002\000\022\004\uffe2\030\uffe2" +
    "\031\uffe2\035\uffe2\036\uffe2\037\uffe2\044\uffe2\045\uffe2\001" +
    "\002\000\020\004\071\014\063\022\070\026\066\032\062" +
    "\033\065\034\067\001\002\000\036\005\106\006\102\007" +
    "\111\010\105\011\112\012\101\013\113\014\107\015\104" +
    "\016\110\017\103\020\100\021\114\027\154\001\002\000" +
    "\016\004\053\030\034\035\040\037\045\044\037\045\010" +
    "\001\002\000\022\004\uffe0\030\uffe0\031\uffe0\035\uffe0\036" +
    "\156\037\uffe0\044\uffe0\045\uffe0\001\002\000\016\004\053" +
    "\030\034\035\040\037\045\044\037\045\010\001\002\000" +
    "\022\004\uffe1\030\uffe1\031\uffe1\035\uffe1\036\uffe1\037\uffe1" +
    "\044\uffe1\045\uffe1\001\002\000\022\004\071\014\063\022" +
    "\070\026\066\027\uffd9\032\062\033\065\034\067\001\002" +
    "\000\004\027\162\001\002\000\004\025\163\001\002\000" +
    "\022\004\uffdf\030\uffdf\031\uffdf\035\uffdf\036\uffdf\037\uffdf" +
    "\044\uffdf\045\uffdf\001\002\000\004\004\165\001\002\000" +
    "\004\014\170\001\002\000\004\027\167\001\002\000\010" +
    "\004\ufff2\014\ufff2\030\ufff2\001\002\000\010\041\020\042" +
    "\016\043\021\001\002\000\006\024\uffef\027\uffef\001\002" +
    "\000\006\024\173\027\ufff1\001\002\000\004\004\174\001" +
    "\002\000\004\014\175\001\002\000\010\041\020\042\016" +
    "\043\021\001\002\000\006\024\uffef\027\uffef\001\002\000" +
    "\006\024\ufff0\027\ufff0\001\002\000\004\030\034\001\002" +
    "\000\010\002\ufff5\045\ufff5\046\ufff5\001\002\000\004\004" +
    "\165\001\002\000\004\027\204\001\002\000\010\004\ufff3" +
    "\014\ufff3\030\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\003\001\001\000\010\003\011\004" +
    "\004\010\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\027\001\001\000\004\005\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\023\001\001" +
    "\000\002\001\001\000\004\007\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\032\001\001\000\004\007\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\034\001\001" +
    "\000\026\004\040\014\042\016\043\017\051\020\050\021" +
    "\047\022\035\023\045\024\046\025\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\025\071\026\057\030\063\031\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\071\031\135\001\001\000\004\027\132\001\001" +
    "\000\002\001\001\000\010\025\071\030\076\031\060\001" +
    "\001\000\002\001\001\000\006\025\071\031\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\071\026" +
    "\073\030\063\031\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\025" +
    "\071\030\131\031\060\001\001\000\010\025\071\030\130" +
    "\031\060\001\001\000\010\025\071\030\127\031\060\001" +
    "\001\000\010\025\071\030\126\031\060\001\001\000\010" +
    "\025\071\030\125\031\060\001\001\000\010\025\071\030" +
    "\124\031\060\001\001\000\010\025\071\030\123\031\060" +
    "\001\001\000\010\025\071\030\122\031\060\001\001\000" +
    "\010\025\071\030\121\031\060\001\001\000\010\025\071" +
    "\030\120\031\060\001\001\000\010\025\071\030\117\031" +
    "\060\001\001\000\010\025\071\030\116\031\060\001\001" +
    "\000\010\025\071\030\115\031\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\025\071\030\134\031\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\071\030\140\031\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\025\071\030\143\031" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\071\030\146\031\060\001\001\000\002\001\001\000" +
    "\026\004\040\014\042\016\150\017\051\020\050\021\047" +
    "\022\035\023\045\024\046\025\053\001\001\000\002\001" +
    "\001\000\010\025\071\030\152\031\060\001\001\000\002" +
    "\001\001\000\026\004\040\014\042\016\154\017\051\020" +
    "\050\021\047\022\035\023\045\024\046\025\053\001\001" +
    "\000\002\001\001\000\026\004\040\014\042\016\156\017" +
    "\051\020\050\021\047\022\035\023\045\024\046\025\053" +
    "\001\001\000\002\001\001\000\012\025\071\026\160\030" +
    "\063\031\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\170" +
    "\001\001\000\004\013\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\175\001\001" +
    "\000\004\013\176\001\001\000\002\001\001\000\004\014" +
    "\200\001\001\000\002\001\001\000\004\012\202\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_basica ::= chamada_func 
            {
              Expressao RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChamadaFunc cf = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         			RESULT = cf;
         		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_basica ::= IDENTIFICADOR 
            {
              Expressao RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lexeme = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		        		;   
         			RESULT = new ExprIdentificador(lexeme);
         		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_basica ::= FLOAT_LITERAL 
            {
              Expressao RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lexeme = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         	  		float valor = Float.parseFloat(lexeme); 
                    RESULT = new FloatLiteral(valor); 
         	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_basica ::= CHAR_LITERAL 
            {
              Expressao RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
         		   RESULT = new CharLiteral(cl);
         		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_basica ::= INT_LITERAL 
            {
              Expressao RESULT =null;
		int lexemeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lexemeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String lexeme = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  int valor = Integer.parseInt(lexeme); 
                    RESULT = new IntLiteral(valor);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_basica ::= SUB expr_basica 
            {
              Expressao RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpUnaria(op, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_basica ::= NOT expr_basica 
            {
              Expressao RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ExpUnaria(op, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_basica ::= ABRE_PAR expressao FECHA_PAR 
            {
              Expressao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_basica",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao ::= expr_basica 
            {
              Expressao RESULT =null;
		int ebleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ebright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao eb = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				   RESULT = eb;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= expressao MAIOR_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expressao MAIOR_OU_IGUAL expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= expressao MENOR_OU_IGUAL expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= expressao MENOR_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao DIFERENTE_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao IGUAL_QUE expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprRelacional(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= expressao OR expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprLogica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= expressao AND expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        		   RESULT = new ExprLogica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao RESTO expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        			RESULT = new ExprAritmetica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao DIV expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        			RESULT = new ExprAritmetica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao MULT expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        			RESULT = new ExprAritmetica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expressao ::= expressao SUB expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        			RESULT = new ExprAritmetica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expressao ::= expressao SOMA expressao 
            {
              Expressao RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e1 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e2 = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        			RESULT = new ExprAritmetica(e1, e2, op);
        		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // resto_lista_exprs ::= 
            {
              LinkedList<Expressao> RESULT =null;
		 
				 	  RESULT =  new LinkedList<Expressao>();
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // resto_lista_exprs ::= resto_lista_exprs VIRGULA expressao 
            {
              LinkedList<Expressao> RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expressao> re = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						re.addLast(e);
						RESULT = re;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_exprs",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_exprs ::= 
            {
              LinkedList<Expressao> RESULT =null;
		 
				   RESULT =  new LinkedList<Expressao>();
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lista_exprs ::= expressao resto_lista_exprs 
            {
              LinkedList<Expressao> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Expressao> re = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				    re.addFirst(e);
					RESULT = re;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_exprs",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // chamada_func ::= chamada_func IDENTIFICADOR ABRE_PAR lista_exprs FECHA_PAR 
            {
              ChamadaFunc RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ChamadaFunc cf = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expressao> li = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
					cf.addLast(i,li);
					RESULT = cf;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // chamada_func ::= IDENTIFICADOR ABRE_PAR lista_exprs FECHA_PAR 
            {
              ChamadaFunc RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expressao> li = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			
					
					RESULT = new ChamadaFunc(i, li);
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // retorno ::= retorno KEY_RETURN expressao PONTO_VIRGULA 
            {
              Retorno RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Retorno r = (Retorno)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				    RESULT = new Retorno(e);
				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // chamada_func_cmd ::= chamada_func PONTO_VIRGULA 
            {
              ChamadaFuncCmd RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ChamadaFunc cf = (ChamadaFunc)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				  	  RESULT = new ChamadaFuncCmd(cf);
				  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_func_cmd",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // escrita ::= KEY_PRINT ABRE_PAR lista_exprs FECHA_PAR PONTO_VIRGULA 
            {
              Escrita RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expressao> le = (LinkedList<Expressao>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			   RESULT  = new Escrita(le);
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("escrita",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decisao ::= KEY_IF ABRE_PAR expressao FECHA_PAR comando 
            {
              Decisao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
					RESULT = new Decisao(e, c); 
				
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // decisao ::= KEY_IF ABRE_PAR expressao FECHA_PAR comando KEY_ELSE comando 
            {
              Decisao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Comando c1 = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando c2 = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
		
				   RESULT = new Decisao(e, c1, c2); 
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decisao",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteracao ::= KEY_WHILE ABRE_PAR expressao FECHA_PAR comando 
            {
              Iteracao RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
 					RESULT =  new Iteracao(e, c);
 				 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteracao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // atribuicao ::= IDENTIFICADOR ATRIBUICAO expressao PONTO_VIRGULA 
            {
              Atribuicao RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expressao e = (Expressao)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                	RESULT = new Atribuicao(i, e);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("atribuicao",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= chamada_func_cmd 
            {
              Comando RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ChamadaFuncCmd c = (ChamadaFuncCmd)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = c;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= bloco 
            {
              Comando RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = b;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= retorno 
            {
              Comando RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Retorno r = (Retorno)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = r;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= escrita 
            {
              Comando RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Escrita e = (Escrita)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = e;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= decisao 
            {
              Comando RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Decisao d = (Decisao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = d;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= iteracao 
            {
              Comando RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Iteracao i = (Iteracao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = i;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= atribuicao 
            {
              Comando RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Atribuicao a = (Atribuicao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = a; 
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // comando ::= decl_variavel 
            {
              Comando RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclVariavel dv = (DeclVariavel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				RESULT = dv;
			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_comandos ::= 
            {
              LinkedList<Comando> RESULT =null;
		
                    RESULT = new LinkedList<Comando>();
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lista_comandos ::= lista_comandos comando 
            {
              LinkedList<Comando> RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Comando> lc = (LinkedList<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Comando c = (Comando)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					lc.addFirst(c);
					RESULT = lc;
				
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_comandos",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloco ::= ABRE_CHAVE lista_comandos FECHA_CHAVE 
            {
              Bloco RESULT =null;
		int lcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Comando> lc = (LinkedList<Comando>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	             RESULT = new Bloco(lc);
	         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // resto_param_formais ::= 
            {
              LinkedList<ParamFormais> RESULT =null;
		
						 
                           RESULT = new LinkedList<ParamFormais>();
                         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_param_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // resto_param_formais ::= resto_param_formais VIRGULA IDENTIFICADOR SUB tipo resto_param_formais 
            {
              LinkedList<ParamFormais> RESULT =null;
		int rpfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int rpfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		LinkedList<ParamFormais> rpf = (LinkedList<ParamFormais>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
						   rpf.addLast( new ParamFormais(str, t));
						   RESULT = rpf;
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_param_formais",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // param_formais ::= IDENTIFICADOR SUB tipo resto_param_formais 
            {
              LinkedList<ParamFormais> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<ParamFormais> pf = (LinkedList<ParamFormais>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
					pf.addFirst( new ParamFormais(str, t));
					RESULT = pf;
				
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_formais",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nome_args ::= nome_args IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR 
            {
              NomeArgs RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		NomeArgs na = (NomeArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ParamFormais> pf = (LinkedList<ParamFormais>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
              	na.addLast(i, pf);
                RESULT = na;	
              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nome_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nome_args ::= IDENTIFICADOR ABRE_PAR param_formais FECHA_PAR 
            {
              NomeArgs RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<ParamFormais> pf = (LinkedList<ParamFormais>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
	            NomeArgs na  = new NomeArgs(i, pf);
	            RESULT = na;
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nome_args",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl_funcao ::= KEY_PROC nome_args bloco 
            {
              DeclFuncao RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		NomeArgs na = (NomeArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                     RESULT = new DeclFuncao(na, b);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl_funcao ::= KEY_PROC nome_args SUB tipo bloco 
            {
              DeclFuncao RESULT =null;
		int naleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int naright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		NomeArgs na = (NomeArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Bloco b = (Bloco)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = new DeclFuncao(na, b, t);
               
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_funcao",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= KEY_FLOAT 
            {
              Tipo RESULT =null;
		
                 RESULT = Tipo.FLOAT_LITERAL;  
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= KEY_CHAR 
            {
              Tipo RESULT =null;
		  
                RESULT = Tipo.CHAR_LITERAL;        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo ::= KEY_INT 
            {
              Tipo RESULT =null;
		 
              RESULT = Tipo.INT_LITERAL;
       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto_lista_idents ::= 
            {
              LinkedList<String> RESULT =null;
		  
                      	RESULT = new LinkedList<String>();
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // resto_lista_idents ::= VIRGULA IDENTIFICADOR resto_lista_idents 
            {
              LinkedList<String> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  		li.addFirst(str);
                   		 RESULT = li;        
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("resto_lista_idents",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_idents ::= IDENTIFICADOR resto_lista_idents 
            {
              LinkedList<String> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                 	li.addLast(str);
                    RESULT = li;        
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_idents",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_variavel ::= KEY_VAR lista_idents SUB tipo PONTO_VIRGULA 
            {
              DeclVariavel RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<String> li = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  RESULT = new DeclVariavel(li, t);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_variavel",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_global ::= decl_funcao 
            {
              DeclGlobal RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclFuncao df = (DeclFuncao)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = df;      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_global ::= decl_variavel 
            {
              DeclGlobal RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclVariavel dv = (DeclVariavel)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dv;   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Programa RESULT =null;
		 RESULT = new Programa();  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= programa decl_global 
            {
              Programa RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Programa p = (Programa)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DeclGlobal d = (DeclGlobal)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 p.addLast(d); RESULT = p ;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

